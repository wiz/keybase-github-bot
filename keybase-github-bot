#!/usr/bin/env node
const http = require('http')
const crypto = require('crypto')
const fs = require('fs')
const Bot = require('keybase-bot')

const username = process.env.KB_BOT_USERNAME
const paperkey = process.env.KB_BOT_PAPERKEY
const team = process.env.KB_TEAMNAME
const secret = process.env.GITHUB_SECRET
const channelMapping = process.env.GITHUB_REPO_MAPPINGS

const bot = new Bot()
const server = http.createServer
(
    (req, res) =>
    {
        let body = []
        req.on('data', (chunk) => body.push(chunk))
        req.on('end', () =>
            {
                try
                {
                    req.body = JSON.parse(Buffer.concat(body).toString())
                }
                catch (e)
                {
                    req.body = Buffer.concat(body).toString()
                }
                try
                {
                    res.statusCode = handle(req, res)
                    res.end()
                }
                catch (e)
                {
                    console.log("Error! "+e)
                    res.statusCode = 400
                    res.end()
                }
            }
        )
    }
)

async function main()
{
    try
    {
        await init()
        await joinAll(team)
        await server.listen(3001)
        console.log('Ready!')
    }
    catch (error)
    {
        console.log(error)
        await bot.deinit()
    }
}

function cleanup()
{
    console.log("cleaning up...")
    bot.deinit()
}

async function init()
{
    //await bot.init(username, paperkey, {verbose: false})
    await bot.initFromRunningService()
    console.log(`Your bot is initialized. It is logged in as ${bot.myInfo().username}`)
}

async function joinAll(teamName)
{
    await bot.chat.listChannels(teamName).then
    (
        async teamConversations =>
        {
            for (const conversation of teamConversations)
            {
                if (conversation.memberStatus !== 'active')
                {
                    await bot.chat.joinChannel(conversation.channel)
                    console.log('Joined team channel', conversation.channel.name, conversation.channel.topicName)
                    await sendMessageToTeamChannel(teamName, conversation.channel.topicName, `Hello! This is ${bot.myInfo().username}! a friendly bot to help with GitHub`)
                }
            }
        }
    )
}

async function sendMessageToTeamChannel(teamName, channelName, body)
{
    const channel =
    {
        membersType: 'team',
        topicType: 'chat',
        name: teamName,
        topicName: channelName,
    }
    const message =
    {
        body: body
    }
    console.log(`Sending message to ${teamName}#${channelName}: ${body}`)
    await bot.chat.send(channel, message)
}

function handle(req, res)
{
    let sig = ""
    let announcement = ""
    let commitString = ""

    const repo = req.body.repository.full_name
    const channel = getChannelForRepo(repo)

    console.log("Webhook event " + req.headers['x-github-event'] + " for repo " + repo)
    //console.log(req.headers)
    //console.log(req.body)

    if (repo == null || channel == null)
    {
        console.log("No channel mapped to repo, ignoring this event!")
        return 200
    }

    try
    {
        sig = "sha1=" + crypto.createHmac('sha1', secret).update(req.headers['x-github-delivery']).digest('hex')
    }
    catch(e)
    {
        console.log("failed to calculate signature! "+sig)
        return 400
    }

    if (req.headers['x-hub-signature'] != sig)
    {
        console.log("failed sig check check: "+sig)
        //return 400
    }

    if (req.headers['x-github-event'] === "issues")
    {
        if (req.body.action === "opened")
        {
            announcement = "⚠️   new issue opened by _" + req.body.issue.user.login + '_\n*' + escapeTitle( req.body.issue.title ) + '*\n' + req.body.issue.html_url + truncateBody( req.body.issue.body )
        }
        else if (req.body.action === "closed")
        {
            announcement = "⛔  issue closed by _" + req.body.sender.login + '_\n*' + escapeTitle( req.body.issue.title ) + '*\n' + req.body.issue.html_url + '\n\n.'
        }
        else if (req.body.action === "reopened")
        {
            announcement = "🔁  issue reopened by _" + req.body.sender.login + '_\n*' + escapeTitle( req.body.issue.title ) + '*\n' + req.body.issue.html_url + '\n\n.'
        }
    }

    if (req.headers['x-github-event'] === "issue_comment" && req.body.action === "created")
    {
        announcement = "🗨️  comment by _" + req.body.comment.user.login + '_\n*' + escapeTitle( req.body.issue.title ) + '*\n' + req.body.comment.html_url + truncateBody( req.body.comment.body )
    }

    if (req.headers['x-github-event'] === "pull_request_review_comment" && req.body.action === "created")
    {
        announcement = "💭  review comment by _" + req.body.comment.user.login + '_\n*' + escapeTitle( req.body.pull_request.title ) + '*\n' + req.body.comment.html_url + truncateBody( req.body.comment.body )
    }

    if (req.headers['x-github-event'] === "pull_request")
    {
        if (req.body.action === "opened")
        {
            announcement = "💡  new pull request opened by _" + req.body.pull_request.user.login + '_\n*' + escapeTitle( req.body.pull_request.title ) + '*\n' + req.body.pull_request.html_url + truncateBody( req.body.pull_request.body )
        }
        else if (req.body.action === "reopened")
        {
            announcement = "🔁  pull request reopened by _" + req.body.sender.login + '_\n*' + escapeTitle( req.body.pull_request.title ) + '*\n' + req.body.pull_request.html_url + '\n\n.'
        }
        else if (req.body.action === "closed" && req.body.pull_request.merged)
        {
            announcement = "🏆  pull request merged by _" + req.body.sender.login + '_\n*' + escapeTitle( req.body.pull_request.title ) + '*\n' + req.body.pull_request.html_url + '\n\n.'
        }
        else if (req.body.action === "closed" && !req.body.pull_request.merged)
        {
            announcement = "⛔  pull request closed by _" + req.body.sender.login + '_\n*' + escapeTitle( req.body.pull_request.title ) + '*\n' + req.body.pull_request.html_url + '\n\n.'
        }
    }

    if (req.headers['x-github-event'] === "pull_request_review")
    {
        if (req.body.action === "submitted")
        {
            if (req.body.review.state === "changes_requested")
            {
                announcement = "❌  _" + req.body.sender.login + "_ requested changes on pull request by _" +  req.body.pull_request.user.login + "_\n*" + escapeTitle( req.body.pull_request.title ) + "*\n"+ req.body.review._links.html.href + truncateBody( req.body.review.body )
            }
            else if (req.body.review.state === "approved") {
                announcement = "✅  _" + req.body.sender.login + "_ approved pull request by _" +  req.body.pull_request.user.login + "_\n*" + escapeTitle( req.body.pull_request.title ) + "*\n"+ req.body.review._links.html.href + truncateBody( req.body.review.body )
            }
            else if (req.body.review.state === "commented")
            {
                announcement = "🔍  pull request reviewed by _" +  req.body.sender.login + "_\n*" + escapeTitle( req.body.pull_request.title ) + "*\n" + req.body.review._links.html.href + truncateBody( req.body.review.body )
            }
        }
    }

    if (req.headers['x-github-event'] === "push")
    {
        if (true || req.body.ref === "refs/heads/master" || ( ( req.body.ref ).replace( /refs\/tags\/v[0-9].[0-9].?[0-9]?/, "" ).length === 0 ))
        {
            if (req.body.commits.length > 0)
            {
                for (let c in req.body.commits)
                {
                    commitString += ">`" + req.body.commits[c].id.substring(0,8) + "` " + ( req.body.commits[c].message.split("\n")[0] ).replace( /`+/gm, "`" ) + " - " + req.body.commits[c].author.username + "\n"
                }
                announcement = '*_' + req.body.sender.login + '_ pushed ' + req.body.commits.length + ( req.body.commits.length > 1 ? ' commits' : ' commit' ) + ' to* `' + ( req.body.ref).split("/")[2] + '`\n\n' + commitString  + '\n.'
                commitString = ""
            }
        }
    }

    if (req.headers['x-github-event'] === "release" && req.body.action === "published")
    {
        announcement = "*_" + req.body.sender.login + "_ just released " + req.body.release.tag_name + "*\n" + req.body.release.html_url + "\n\n🎉\n\n."
    }

    if (announcement.length < 1)
    {
        console.log("Unhandled event type, ignoring this event!")
        return 200
    }

    console.log(announcement)
    sendMessageToTeamChannel(team, channel, announcement)
    return 200
}

function getChannelForRepo(targetRepo)
{
    let map = channelMapping.split(',')
    for (let i = 0; map[i]; i++)
    {
        mapmap = map[i].split('=')
        repo = mapmap[0]
        channel = mapmap[1]
        if (targetRepo == repo)
            return channel
    }
    return null
}

function escapeTitle(rawTitle)
{
    return rawTitle.replace( /`+/gm, "\\`" )
}

function truncateBody(rawBody)
{
    //don't bother if body is empty
    if (rawBody.length === 0)
    {
        return "\n\n."
    }

    let truncatedBody = rawBody.trim()
    let bodyEnd = "\n\n."  //if full message shows

    //truncate string after 3 paragraphs
    let splitBody = rawBody.split( "\r\n\r\n" )
    if( splitBody.length > 3 ) {
        splitBody = splitBody.slice(0,3)
        truncatedBody = splitBody.join( "\r\n\r\n" )
        bodyEnd = "\n\n..."    //if truncated message shows
    }

    truncatedBody = "\n\n" + truncatedBody + bodyEnd

    return truncatedBody
}

process.on('exit', cleanup)
main()

console.log("Starting...")
